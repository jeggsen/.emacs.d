#!emacs --script

;;; Setup

;; make sure to print everything
(setq inhibit-message nil)

(defconst straight-build-dir
  (expand-file-name (locate-user-emacs-file "straight/build/")))
(defconst straight-repo-dir
  (expand-file-name (locate-user-emacs-file "straight/repos/")))

(defmacro req (feature)
  "Convenience macro for requiring packages."
  `(progn
     (add-to-list 'load-path
                  (concat straight-build-dir (symbol-name ,feature)))
     (require ,feature)))

(require 'lisp-mnt)

(req 'dash)
(req 's)
(req 'f)

(defun msg (txt &rest args)
  "Print the format-string TXT to stdout."
  (let ((output (apply #'format (cons txt args))))
    (princ output)
    (unless (s-ends-with-p "\n" output)
      (princ "\n"))))

;; load `straight'
(let ((bootstrap-file (concat straight-repo-dir "straight.el/bootstrap.el")))
  (if bootstrap-file
      (load bootstrap-file nil 'nomessage)
    (error "could not locate straight.el bootstrap file")))

;;; Core functionality

(defun upmacs--get-packages ()
  "Return a list of all packages."
  (f-directories straight-build-dir))

(defun upmacs--get-latest-commit (repo)
  "Return the most recent commit in REPO."
  (s-trim (shell-command-to-string (format "(cd %s; git rev-parse HEAD)" repo))))

(defun upmacs--get-dependents (pkg)
  "Return a list of packages that PKG depends on."
  '())

;;; Interface

(defun upmacs-usage ()
  "Print script usage."
  (msg "help:             show usage")
  (msg "ls, list:         list all straight packages")
  (msg "update <pkg(s)>:  update specific package(s)")
  (msg "rebuild <pkg(s)>: rebuild specific package(s)")
  (msg "update-all:       update all packages"))

(defun upmacs-list ()
  "List all packages."
  (let* ((pkgs (upmacs--get-packages))
         (names (-map #'f-base pkgs)))
    (-map #'msg names)))

(defun upmacs-remove ()
  "Remove a package by name."
  (let ((pkg (pop argv)))
    (cond
     ((null pkg) (error "no package provided"))
     (t
      (ignore-errors
        (let* ((file (concat pkg ".el"))
               (build-dir (f-join straight-build-dir pkg))
               (build-src-file (f-join build-dir file))
               ;; the build-src-file is a symlink to the repo
               ;; directory, we use this to get the location of the
               ;; repository directory.
               (symlink (file-symlink-p build-src-file))
               (repo-dir (when symlink (f-dirname symlink))))
          (dolist (d (list build-dir repo-dir))
            (when (and d (f-directory-p d))
              (msg "removing %s" d)
              (f-delete d 'force)))))))))

(defun upmacs-update ()
  "Update one or more packages by name."
  (let* ((pkgs ()))
    (while argv
      (add-to-list 'pkgs (pop argv) 'append))
    (cond
     ((null pkgs) (error "no package(s) provided"))
     (t
      (dolist (pkg pkgs)
        (straight-pull-package pkg)
        (straight-rebuild-package pkg))))))

(defun upmacs-update-all ()
  "Update all packages."
  (let ((failed-packages (straight-pull-all)))
    (if failed-packages
        (msg "failed to update %s" failed-packages)
      (msg "updated all packages."))))

(defun upmacs-rebuild ()
  "Rebuild one or more packages by name."
  (let* ((pkgs ()))
    (while argv
      (add-to-list 'pkgs (pop argv) 'append))
    (cond
     ((null pkgs) (error "no package(s) provided"))
     (t
      (dolist (pkg pkgs)
        (straight-rebuild-package pkg))))))

(defun upmacs-rebuild-all ()
  "Rebuild all packages"
  (let ((failed-packages (straight-rebuild-all)))
    (if failed-packages
        (msg "failed to rebuild %s" failed-packages)
      (msg "rebuilt all packages."))))

(defun upmacs-freeze ()
  "List all packages and their most recent commit."
  (let ((pkgs (f-directories straight-repo-dir)))
    (dolist (pkg pkgs)
      (msg "%s %s" (upmacs--get-latest-commit pkg) pkg))))

(defun upmacs-dependencies ()
  ""
  (let ((pkgs (upmacs--get-packages)))
    (-map (lambda (p) (cons p (upmacs--get-dependents p))) pkgs)))

(let ((pkgs (upmacs--get-packages)))
  (dolist (p pkgs)
    (lm-header)
    (message "%s = %s" (car p) (package-desc-reqs (cadr p)))))

(if (null argv)
    ;; display usage if called without arguments
    (upmacs-usage)
  (while argv
    (let ((arg (pop argv)))
      (pcase arg
        ("help" (upmacs-usage))
        ((or "ls" "list") (upmacs-list))
        ((or "rm" "remove") (upmacs-remove))
        ((or "install" "update") (upmacs-update))
        ((or "build" "rebuild") (upmacs-rebuild))
        ((or "build-all" "rebuild-all") (upmacs-update-all))
        ("update-all" (upmacs-update-all))
        ("freeze" (upmacs-freeze))
        ((or "deps" "depends") (upmacs-dependencies))
        ))))
